// This file compiled using lessc styling.less > styling.css
// Reference the .css in HTML file

// Styling variables
@background-to-text: darkgrey;
@background-to-icon: lightgrey;
@text-color: white;
// @icon-class: 
// @icon-colors: green, red, blue, yellowgreen, orangered, blueviolet, pink, black;

// We need a loop that outputs cards, each with a central @color drawn from array
// <article class="card">
//   <div class="icon">
//     <i class="fas fa-clock" style="font-size: inherit; color: (@value)"></i>
//   </mydiv>
//   <p class="msg">content for card 1</p>
// </article>
// .make-one(@this-color) {
//     @output: (@this-color)
// };

// The & appends the parent nesting structure where ever the & may occur...
// think of it as a "string replacement" for a selector, or 'append'.
// Here, it concats successive loops.
// .for(@list, @code) {
//     & {
//         .loop(@i:1) when (@i =< length(@list)) {
//             @value: extract(@list, @i);

//             @code();

//             .loop(@i + 1);
//         }

//         .loop();
//     }
// }

// each(@icon-colors, {
//     background-color: (@value);
// });

ul {
    background-color: inherit;
}

li {
    color: orange;
}

// #instance - ref. unique HTML element by ID
#site-header {
    color: @text-color;
    background-color: @background-to-text;
}

// .class - reusable properties
.tomatobg {
    background-color: tomato;
    color: white;
    padding: 10px;
}

.cards{
    color: pink; font-size: 24px;
}

.card {
    color: inherit; 
    font-size: inherit;
    max-width: 150px;
    margin: auto;
}

// Contained elements need 'property: inherit' to show this
.icon {
  background-color: @background-to-icon;
  font-size: 64px;
  &:hover{
    background-color: fadeout(@background-to-text, 50%)
  }
}

.msg {
    background-color: @background-to-text;
    color: @text-color;
    font-size: 24px;
    padding: 20px;
}

